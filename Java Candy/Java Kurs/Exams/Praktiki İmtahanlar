# #25.1 Practical Exam

## Task: TaskManager

- Create an enum **`PriorityLevel`** with values:
    - `LOW` — task needs maximum 4 hours.
    - `MEDIUM` — task needs maximum 8 hours
    - `HIGH` — task needs more than 8 hours.
- Create a class **`Task`** with the following attributes:
    - `String text` : The name of the task.
    - `PriorityLevel priority` : The minimum amount of hours to solve the task.
    - add constructor which receives text of task and number of maximum hours needed to do the task. Use hours to decided the priority of the task.
- Create a class **`TaskManager`** that manages a collection of tasks. It should have:
    - `List<Task> tasks` — stores all the tasks.
    - `void addTask (Task task)` — method to add a task. Throws DuplicateTaskException if task already present.
    - `void removeTask (String text)` — removes a task by name.
    - `String toString()` — put all tasks in seperate lines from high priority to low priority.

```java
    public static void main(String[] args) {
        ArrayList<Task> tasks = new ArrayList<>(List.of(
                new Task("Design User Interface (1 hour)", 1),
                new Task("Write Software Documentation (12 hours)", 12),
                new Task("Research New Technologies (2 hours)", 2),
                new Task("Develop Mobile App Features (9 hours)", 9),
                new Task("Debug Codebase (7 hours)", 7),
                new Task("Test Application Performance (6 hours)", 6),
                new Task("Deploy Software Updates (10 hours)", 10),
                new Task("Meet with Project Stakeholders (5 hours)", 5),
                new Task("Create Presentation Slides (3 hours)", 3)
        ));

        TaskManager manager = new TaskManager();
        tasks.forEach(t -> {
            try {
                manager.addTask(t);
            } catch (DuplicateTaskException e) {
                System.out.println(e.getMessage());
            }
        });
        manager.removeTask("Meet with Project Stakeholders (5 hours)");
        System.out.println(manager);
    }
```

---

Scoring:

1. 5 points for clean coding and applying proper naming
2. 10 points for applying encapsulation
3. 5 points for creating `addTask` method
4. 5 points for creating `removeTask` method
5. 5 points for creating `toString` method
6. 10 points for implementing Comparable/Comparator to sort from high to low priority
7. 10 points for code is working

[Untitled Database](https://www.notion.so/4632bb8ec93a4d06a86faa74f8868176?pvs=21)




# #Exam - SQL

# Task: RentACar Database

Consider a database with two tables:

- Customer (customer_id, customer_name, email, phone)
- Car (car_id, make, model, prod_year, customer_id)

The Customer table contains information about customers, and the Car table contains information about cars rented by customers. Both tables are related by the customer_id column.

```sql
('John Doe', 'john@example.com', '123-456-7890'),
('Jane Smith', 'jane@example.com', '987-654-3210'),
('Bob Johnson', 'bob@example.com', '555-123-4567'),
('Mary Brown', 'mary@example.com', '111-222-3333'),
('Tom Adams', 'tom@example.com', '444-555-6666'),
('Alice White', 'alice@example.com', '777-888-9999'),
( 'Chris Lee', 'chris@example.com', '333-999-7777'),
('Sarah Taylor', 'sarah@example.com', '222-777-8888'),
('Michael Clark', 'michael@example.com', '666-333-1111'),
('Emily Davis', 'emily@example.com', '999-111-5555');

('Toyota', 'Corolla', 2018, 1),
('Honda', 'Civic', 2019, 2),
('Ford', 'Mustang', 2020, 3),
('Chevrolet', 'Camaro', 2017, 5),
('BMW', 'X5', 2019, 6),
('Audi', 'A4', 2018, 7),
('Mercedes', 'C-Class', 2020, 1),
('Subaru', 'Outback', 2019, 8),
('Tesla', 'Model 3', 2021, 9),
('Nissan', 'Altima', 2016, 10),
('Volkswagen', 'Jetta', 2017, 2),
('Hyundai', 'Sonata', 2020, NULL);
```

1. **Create Car and Customer tables (5 points):**
    - The customer_name column in the Customer table is specified as NOT NULL, ensuring that it cannot be empty.
    - The email column in the Customer table is specified as UNIQUE, ensuring that each email address is unique and avoiding duplicate entries.
    - The phone column in the Customer table is specified as NOT NULL, ensuring that it cannot be empty.
    - All columns in the Car table (make, model, year) are specified as NOT NULL, ensuring that they cannot be empty.
2. **Insert records (5 points).**
3. **Update & delete (5 points):**
    - Update the email of the customer with customer_id = 2 to "[jane.smith@gmail.com](mailto:jane.smith@gmail.com)".
    - Delete the car with car_id = 11.
4. **Retrieve the last produced car (5 points).**
5. **Retrieve customer name and the total number of cars owned by each customer. Records have to be sorted by customer id (10 points).**
6. **Retrieve customers who own cars made by Toyota (10 points).**
7. **Retrieve a list of customers along with the details of their cars (10 points).**

[](https://www.notion.so/4fef594a1b4a424285033dfad6051361?pvs=21)

[](https://www.notion.so/59aa84a246c24daa9437cce7ee156089?pvs=21)
